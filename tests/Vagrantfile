# -*- mode: ruby -*-
# vi: set ft=ruby :

CURRENT_PATH = File.dirname(File.expand_path(__FILE__))

Vagrant.configure("2") do |config|
  boxes = [
   # { :name => "syslog", :box => "ubuntu/bionic64" },
    { :name => "jammy", :box => "ubuntu/jammy64" },
    { :name => "focal", :box => "ubuntu/focal64" },
    { :name => "bionic", :box => "ubuntu/bionic64" },
    { :name => "xenial", :box => "ubuntu/xenial64" },
    { :name => "centos7", :box => "centos/7" },
    { :name => "centos8", :box => "centos/stream8" },
    { :name => "rhel8", :box => "generic/rhel8" },
    { :name => "rhel9", :box => "generic/rhel9" },
  ]
  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.box = opts[:box]
      config.vm.provider "virtualbox" do |vb|
        vb.memory = "1024"
        vb.cpus = 2
        vb.linked_clone = true
        # Workaround for Ubuntu Cloud init VMs (focal)
        # Create virtual serial port, output to file console-output.OS.
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vb.customize ["modifyvm", :id, "--uartmode1", "file", "#{CURRENT_PATH}/console-output.#{opts[:name]}"]
      end
      if opts[:name] == boxes.last[:name]
        config.vm.provision "ansible: check",  type: "ansible", run: "always" do |ansible|
          ansible.compatibility_mode = "2.0"
          ansible.playbook = "test.yml"
          ansible.limit = "all"
          ansible.raw_arguments = ["--check", "--diff"]
          ansible.galaxy_role_file = "requirements.yml"
        end
        config.vm.provision "ansible: run", type: "ansible" do |ansible|
          ansible.compatibility_mode = "2.0"
          ansible.playbook = "test.yml"
          ansible.limit = "all"
        end
      end
      if opts[:name] == "syslog"
        config.vm.provision "shell", inline: <<-SHELL
          mkdir -p /srv/log/{all,warn}
          chown syslog:adm /srv/log/{all,warn}
          cat <<EOF > /etc/rsyslog.d/00-remote.conf
          module(load="imudp")
          input(type="imudp" port="514")

          module(load="imtcp")
          input(type="imtcp" port="514")

          \\$template Everything,"/srv/log/all/%fromhost%.log"
          \\$template WarningToEmerg,"/srv/log/warn/%fromhost%.log"

          # Log all important messages (warnings and higher) to separate files
          if (\\$syslogseverity != '5') and (\\$syslogseverity != '6') and (\\$syslogseverity != '7') then -?WarningToEmerg

          # Log all messages to file
          *.* -?Everything

          if (\\$fromhost != 'syslog') then stop
          & ~
          EOF
          systemctl restart rsyslog
        SHELL
      end
    end
  end
end
